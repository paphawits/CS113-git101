ประเภทข้อมูล
char 1 byte	
unsigned char 1 byte
signed char	 1 byte
int 4 byte
unsigned int 4 byte
short 2 byte	
unsigned short 2 byte	
long 4 byte	
unsigned long 4 byte	
float 4 byte	
double 8 byte	
long double 10 byte	
bool 1 bit	

Boolean เป็นประเภทข้อมูลที่มีได้เพียงสองค่าคือจริง true และเท็จ false ซึ่งเป็นประเภทของตัวแปรสำหรับเก็บค่าที่เป็นไปได้เพียงสองค่า

Char ตัวอักษร เป็นประเภทข้อมูลที่ใช้สำหรับเก็บตัวอักษรจำนวนหนึ่งตัวอักษรใน ASCII ภาษา C นั้นยังไม่ได้สนับสนุนการเก็บข้อมูลแบบ String แต่คุณสามารถทำแบบนั้นได้ โดยการใช้ Char array เพื่อเก็บตัวอักษรที่ต่อกันหลายตัว

Integer ตัวเลขจำนวนเต็ม เป็นประเภทข้อมูลแบบจำนวนเต็ม ซึ่งข้อมูลแบบ Integer นั้นจะประกอบไปด้วยหลายขนาด เช่น short int และ long ซึ่งจะเก็บข้อมูลในระยะที่แตกต่างกัน เรามักจะใช้ตัวแปรประเภท Integer สำหรับเก็บข้อมูลที่นับได้

 Floating-point numbers ตัวเลขจำนวนจริง ป็นประเภทข้อมูลสำหรับเก็บตัวเลขจำนวนจริง ในภาษา C จะมีอยู่สองประเภทคือ float และ double สิ่งที่แตกต่างกันคือขนาดของพื้นที่ที่ใช้ในการจัดเก็บ และข้อมูลประเภท double นั้นจะเก็บจำนวนของทศนิยมได้มากกว่า ข้อมูลประเภทนี้จะใช้เก็บข้อมูลที่มีค่าเป็นเศษส่วนหรือตัวเลขที่มีเลขหลังจุดทศนิยม

ตัวดำเนินการ
Assignment operator
ตัวดำเนินการกำหนดค่า ในภาษา C ใช้สัญลักษณ์เท่ากับ (=) มันถูกใช้เพื่อกำหนดค่าให้กับตัวแปรหรือค่าคงที่ ตัวดำเนินการจะมีสอง Operand การทำงานของมันคือการนำค่าทางด้านขวาไปใส่ทางด้านซ้าย และ Operand ทางด้านขวาสามารถเป็น Expression ใดๆ

Arithmetic operators ( +, -, *, /, % )
ตัวดำเนินการทางคณิตศาสตร์ คือตัวดำเนินการที่ใช้เพื่อกระทำการดำเนินการทางคณิตศาสตร์ระหว่างตัวแปรหรือค่าคงที่ เช่น การบวก การลบ การคูณ และการหาร สำหรับในการเขียนโปรแกรมในภาษา C นั้นจะมีตัวดำเนินการสำหรับการหารเอาเศษ (Modulo) เพิ่มเข้ามา
+ Addition	           c = a + b
- Subtraction         c = a - b
* Multiplication    c = a * b
/ Division	           c = a / b
% Modulo	           c = a % b

Compound assignment (+=, -=, *=, /=, %=, >>=, <<=, &=, ^=, |=)
คือตัวดำเนินการที่ใช้เพื่ออัพเดทหรือแก้ไขค่าปัจจุบันของตัวแปรโดยการกระทำทางคณิตศาสตร์และใช้ตัวดำเนินการกำหนดค่าร่วมด้วย ซึ่งตัวดำเนินการแบบ Compound assignment มักจะใช้เป็นรูปแบบสั้นของตัวดำเนินการทางคณิตศาสตร์และตัวดำเนินการระดับบิตเพื่อให้การเขียนสั้นลง
+=	a += 2;	a = a + 2
-=	a -= 2;	a = a - 2
*=	a *= 2;	a = a * 2
/=	a /= 2;	a= a / 2
%=	a %= 2;	a = a % 2
>>=	a >>= 2;	a = a >> 2
<<=	a <<= 2	a = a << 2
&=	a & = 2;	a = a & 2
^=	a ^= 2;	a= a ^ 2
|=	a |= 2;	a = a | 2

Increment and decrement (++, --)
ตัวดำเนินการเพิ่มและลดค่า คือตัวดำเนินการที่ใช้เพื่อบวกหรือลบค่าออกจากตัวแปรโดย 1 โดยการเพิ่มเครื่องหมาย ++ หรือ-- ใส่ข้างหน้าหรือข้างหลังตัวแปร
Relational และ comparison operators ( ==, !=, >, <, >=, <= )
ตัวดำเนินการความสัมพันธ์และเปรียบเทียบ คือตัวดำเนินการที่ถูกใช้เพื่อประเมินค่า true และ false ระหว่างสองค่าถูกดำเนินการ ซึ่งขึ้นกับเงื่อนไขและความสัมพันธ์ของมัน
==	a == b	true if `a` equal to `b`, otherwise false
!=	a != b	true if `a` not equal to `b`, otherwise false
<	a < b	true if `a` less than `b`, otherwise false
>	a > b	true if `a` greater than `b`, otherwise false
<=	a <= b	true if `a` less than or equal to `b`, otherwise false
>=	a >= b	true if `a` greater than or equal to `b`, otherwise false

Logical operators ( !, &&, || )
not	!	!a
and	&&	a && b
or	||	a || b

Bitwise operators ( &, |, ^, ~, <<, >> )
&	Bitwise AND	1 ถ้าบิตทั้งคู่เป็น 1, ไม่เช่นนั้นเป็น 0
|	Bitwise inclusive OR	1 ถ้าอย่างน้อยหนึงบิตเป็น 1, ไม่เช่นนั้นเป็น 0
^	Bitwise exclusive OR	1 ถ้าทั้งสองบิตแตกต่างกัน, ไม่เช่นนั้นเป็น 0
~	bit inversion	กลับบิตจาก 1 เป็น 0 และในทางตรงข้าม
<<	Shift bits left	เลื่อนบิตไปทางซ้าย เติมบิต 0 ทางขวา
>>	Shift bits right	เลื่อนบิตไปทางขวา เติมบิต 0 ทางซ้าย

